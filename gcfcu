#!/bin/sh
#set -x

site_base=https://secure.cuaccount-access.com/GeneseeCoopFCU
rcfile=~/.config/gcfcurc
cookie_jar=${GCFCU_COOKIEJAR:-~/.gcfcu_cookies.txt}
cookie_jar_checked=
cache_dir="/tmp/gcfcu-$USER"
cache_dir_checked=

opt_verbose=
opt_nocache=
opt_raw=
opt_help=

test -e "$rcfile" && . "$rcfile"

# Check if a file is accessible to other users
insecure_file() {
	test -n "$(find "$1" -maxdepth 0 -perm +066 2>&-;
		find "$1" -maxdepth 0 -perm /066 2>&-)"
}

# Check the cookie file and create it if necessary
check_cookies() {
	test -n "$cookie_jar_checked" && return
	test -e "$cookie_jar" || touch "$cookie_jar"
	insecure_file "$cookie_jar" && chmod 600 "$cookie_jar"
	cookie_jar_checked=1
}

# Check the cache dir and create if it necessary
check_cachedir() {
	test -n "$cache_dir_checked" && return
	test -d "$cache_dir" || mkdir -p "$cache_dir"
	insecure_file "$cache_dir" || chmod 700 "$cache_dir"
	cache_dir_checked=1

	# Clean out the cache dir. delete files older than one day
	find "$cache_dir" -mtime +0 -exec echo rm {} \+
}

# Extract a value from a HTML element
get_value() {
	sed -e "/$1/!d" -e 's/.*value="//; s/".*//; q' $2
}

# Empty the cache
clean_cache() {
	rm -rf "$cache_dir"
}

# Make a request directly
req() {
	local url="$site_base$1"
	shift
	test -n "$opt_verbose" && echo req $url >&2
	curl -s -b "$cookie_jar" -c "$cookie_jar" "$url" $@
}

# Make a request, cached
req_cached() {
	local cache_file="$cache_dir/$(echo ${1%%\?*} | sed 's/\//-/g')"
	if test -z "$opt_nocache" -a -s "$cache_file"
	then cat "$cache_file"
	else
		trap "rm $cache_file" 1 2 15
		req $@ | tee "$cache_file"
	fi
}

signin() {
	local username password viewstate eventval tmp oob resp
	tmp="$(mktemp)"
	trap "rm '$tmp'" 0
	req '/' > "$tmp"
	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"

	if test -n "$GCFCU_USERNAME"
	then username="$GCFCU_USERNAME"
	else read -rp 'Username: ' username
	fi

	if test -n "$GCFCU_PASSWORD"
	then password="$GCFCU_PASSWORD"
	elif test -n "$GCFCU_PASSCMD"
	then password="$(sh -c "$GCFCU_PASSCMD")"
	else stty -echo; read -rp 'Passphrase: ' password; echo >&2; stty echo
	fi

	req >"$tmp" '/login.aspx' -L -e "$site_base" \
		--data-urlencode "txtUsername=$username" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__EVENTTARGET=cmdLogin" \
		--data-urlencode "__VIEWSTATE=$viewstate"

	if ! grep -q "Continue with Security Code" "$tmp"; then
		echo Security code not asked for. See /tmp/gcfcu-out.html
		cp "$tmp" /tmp/gcfcu-out.html
		return 1
	fi

	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"

	req >"$tmp" '/SignOn.aspx' \
		-e "$site_base" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		-d "_ctl0%3APageWorkSpace%3ASecurityCodeImage1%3AbtnContinueSecurityCode=Continue+with+Security+Code"
	if grep -q 'Processing Error' "$tmp"; then
		echo Error >&2
		return 1
	fi

	oob="$(grep OOBChallenge "$tmp" | sed "s/.*OOBChallenge\.aspx//; s/'.*//")"
	if test -z "$oob"; then
		echo 'Unable to get OOBChallenge' >&2
		return 1
	fi

	req >"$tmp" "/OOBChallenge.aspx$oob"
	if ! grep -q 'Tell us where to reach you' "$tmp"; then
		echo 'Missing OOB challenge' >&2
		return 1
	fi

	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"
	phone_mask="$(get_value _hdnSelectedMaskNum "$tmp")"

	echo 'Receive One-Time Security Code by:'
	echo "[p]hone ($phone_mask)"
	echo "[t]ext message"
	sec_code_text "$oob"; return $?; ##
	while true; do
		read -p '? ' resp
		case "$resp" in
			p) sec_code_phone "$oob"; return $?;;
			t) sec_code_text "$oob"; return $?;;
		esac
	done
}

# Receive one-time security code from user by text message
sec_code_text() {
	local oob="$1" locale num_1= num_2= num_3= num_country= num_int= resp
	req >"$tmp" "/OOBChallenge.aspx" \
		-e "$site_base" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AhdnSelectedNum=7" \
		-d "_ctl0%3APageWorkSpace%3AbtnContinue=Continue"

	oob="$(grep OOBChallengeText "$tmp" | \
		sed "s/.*OOBChallengeText\.aspx//; s/'.*//")"
	if test -z "$oob"; then
		echo 'Unable to get OOBChallengeText' >&2
		return 1
	fi

	req >"$tmp" "/OOBChallengeText.aspx$oob"
	if ! grep -q 'Enter your mobile phone number' "$tmp"; then
		echo 'Unable to get to mobile phone number prompt' >&2
		return 1
	fi
	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"

	if test -n "$GCFCU_PHONE_US"; then
		locale=1078
		read num_1 num_2 num_3 <<-EOF
		$GCFCU_PHONE_US
		EOF
	elif test -n "$GCFCU_PHONE"; then
		locale=1079
		read num_country num_int <<-EOF
		$GCFCU_PHONE
		EOF
	elif read -p 'Mobile phone is in US/Canada? [Y/n] ' resp
		test "$resp" != 'n'
	then
		locale=1078
		read -p 'Mobile phone number (___ ___ ____): ' num_1 num_2 num_3
	else
		locale=1079
		read -p 'Country code: ' num_country
		read -p 'Phone number: ' num_int
	fi

	req >"$tmp" "/OOBChallengeText.aspx" -L \
		-d "__EVENTVALIDATION=$eventval" \
		-d "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AddlLocale=$locale" \
		-d "_ctl0%3APageWorkSpace%3AtxtNumber1=$num_1" \
		-d "_ctl0%3APageWorkSpace%3AtxtNumber2=$num_2" \
		-d "_ctl0%3APageWorkSpace%3AtxtNumber3=$num_3" \
		-d "_ctl0%3APageWorkSpace%3AtxtCountryCode=$num_country" \
		-d "_ctl0%3APageWorkSpace%3AtxtIntNum=$num_int" \
		-d "_ctl0%3APageWorkSpace%3AbtnSendMessage=Send+text+message"
	if grep -q 'Processing Error' "$tmp"; then
		echo Error >&2
		return 1
	fi
}

# Receive one-time security code from user by phone
sec_code_phone() {
	false
}

main() {
	local args=
	local cmd=
	for arg; do
		case "$arg" in
			-v|--verbose) opt_verbose=1;;
			-n|--no-cache) opt_nocache=1;;
			-r|--raw) opt_raw=1;;
			-h|--help) opt_help=1;;
			*)
				if test -z "$cmd"
				then cmd="$arg"
				else args="$args $arg"
				fi
		esac
	done
	set -- $args
	case "$cmd" in
		'') signin;;
		clean-cache) clean_cache $@;;
	esac
}

check_cookies
check_cachedir

main $@

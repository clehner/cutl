#!/bin/sh
#set -x

rcfile=~/.config/gcfcurc
site_base=https://secure.cuaccount-access.com/
cache_dir="/tmp/gcfcu-$USER"
cache_dir_checked=
cookie_jar_checked=

opt_verbose=
opt_nocache=
opt_raw=
opt_help=
opt_method=
opt_account=

tmp=
viewstate=
eventval=

test -e "$rcfile" && . "$rcfile"

cu_name=${GCFCU_CU_NAME:-GeneseeCoopFCU}
site_dir=${GCFCU_CU_SITE:-$site_base$cu_name}
cookie_jar=${GCFCU_COOKIEJAR:-~/.gcfcu_cookies.txt}

# Check if a file is accessible to other users
insecure_file() {
	test -n "$(find "$1" -maxdepth 0 -perm +066 2>&-;
		find "$1" -maxdepth 0 -perm /066 2>&-)"
}

# Check the cookie file and create it if necessary
check_cookies() {
	test -n "$cookie_jar_checked" && return
	test -e "$cookie_jar" || touch "$cookie_jar"
	insecure_file "$cookie_jar" && chmod 600 "$cookie_jar"
	cookie_jar_checked=1
}

# Check the cache dir and create if it necessary
check_cachedir() {
	test -n "$cache_dir_checked" && return
	test -d "$cache_dir" || mkdir -p "$cache_dir"
	insecure_file "$cache_dir" || chmod 700 "$cache_dir"
	cache_dir_checked=1

	# Clean out the cache dir. delete files older than one day
	find "$cache_dir" -mtime +0 -exec echo rm {} \+
}

# Extract a value from a HTML element
get_value() {
	sed -e "/$1/!d" -e 's/.*value="//; s/".*//; q' $2
}

# Empty the cache
clean_cache() {
	rm -rf "$cache_dir"
}

# Make a request directly
req() {
	local url="$site_dir$1"
	shift
	test -n "$opt_verbose" && echo req $url >&2
	curl -s -b "$cookie_jar" -c "$cookie_jar" "$url" $@
}

# Make a request, cached
req_cached() {
	local cache_file="$cache_dir/$(echo ${1%%\?*} | sed 's/\//-/g')"
	if test -z "$opt_nocache" -a -s "$cache_file"
	then cat "$cache_file"
	else
		trap "rm $cache_file" 1 2 15
		req_try $@ | tee "$cache_file"
	fi
}

# Make a request, and try to log in if needed
req_try() {
	req $@ -i | awk '
		body==1 { print; next }
		/^Location:.*[lL]ogin/ { exit 99 }
		length($0) == 1 { body=1 }'
	case $? in
		99)
			# Log in and retry the request
			signin && req_try $@
	esac
}

signin() {
	local username password tmp oob resp qs
	tmp="$(mktemp)"
	trap "rm '$tmp'" 0
	req '/' > "$tmp"
	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"

	if test -n "$GCFCU_USERNAME"
	then username="$GCFCU_USERNAME"
	else read -rp 'Username: ' username
	fi

	req >"$tmp" '/login.aspx' -L -e "$site_dir" \
		--data-urlencode "txtUsername=$username" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__EVENTTARGET=cmdLogin" \
		--data-urlencode "__VIEWSTATE=$viewstate"

	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"

	if grep -q 'Continue with Security Code' "$tmp"; then
		signin_sec
	elif ! grep -q 'PassMark Recognized' "$tmp"; then
		echo 'Signin error'
		return 1
	fi

	if test -n "$GCFCU_PASSWORD"
	then password="$GCFCU_PASSWORD"
	elif test -n "$GCFCU_PASSCMD"
	then password="$(sh -c "$GCFCU_PASSCMD")"
	else stty -echo; read -rp 'Passphrase: ' password; echo >&2; stty echo
	fi

	qs="$(grep PassMarkRecognizedAdv "$tmp" | \
		sed 's/.*PassMarkRecognizedAdv\.aspx//; s/".*//; q')"
	req >"$tmp" "/PassMarkRecognizedAdv.aspx$qs" \
		-e "$site_dir" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AbtnSignin=Sign+on" \
		-d "_ctl0%3APageWorkSpace%3AtxtPassword=$password"
	if grep 'Object moved to.*Login\.aspx' "$tmp"; then
		echo retrying login
		signin || return $?
	elif grep -q 'Object moved to <a.*Web_Bank.aspx' "$tmp"; then
		echo login success
	fi
} >&2

signin_sec() {
	req >"$tmp" '/SignOn.aspx' \
		-e "$site_dir" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		-d "_ctl0%3APageWorkSpace%3ASecurityCodeImage1%3AbtnContinueSecurityCode=Continue+with+Security+Code"
	if grep -q 'Processing Error' "$tmp"; then
		echo Error
		return 1
	fi

	oob="$(grep OOBChallenge "$tmp" | sed "s/.*OOBChallenge\.aspx//; s/'.*//")"
	if test -z "$oob"; then
		echo 'Unable to get OOBChallenge'
		return 1
	fi

	req >"$tmp" "/OOBChallenge.aspx$oob"
	if ! grep -q 'Tell us where to reach you' "$tmp"; then
		echo 'Missing OOB challenge'
		return 1
	fi

	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"
	phone_mask="$(get_value _hdnSelectedMaskNum "$tmp")"

	case "${opt_method:-$GCFCU_CODE_METHOD}" in
		phone) sec_code_phone; return $?;;
		text) sec_code_text; return $?;;
		*)
			echo 'Receive One-Time Security Code by:'
			echo "[p]hone ($phone_mask)"
			echo "[t]ext message"
			while true; do
				read -p '? ' resp
				case "$resp" in
					p) sec_code_phone; return $?;;
					t) sec_code_text; return $?;;
				esac
			done
	esac

	#get
	#/PassMarkRecognizedAdv.aspx?qs=b2TU7c2wr8E0dfptJiVc6osqODJNVVaa6UZusUsRdZI%3d
}

# Receive one-time security code from user by text message
sec_code_text() {
	local oob locale num_1= num_2= num_3= num_country= num_int= resp
	req >"$tmp" "/OOBChallenge.aspx" \
		-e "$site_dir" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AhdnSelectedNum=7" \
		-d "_ctl0%3APageWorkSpace%3AbtnContinue=Continue"

	oob="$(grep OOBChallengeText "$tmp" | \
		sed "s/.*OOBChallengeText\.aspx//; s/'.*//")"
	if test -z "$oob"; then
		echo 'Unable to get OOBChallengeText' >&2
		return 1
	fi

	req >"$tmp" "/OOBChallengeText.aspx$oob"
	if ! grep -q 'Enter your mobile phone number' "$tmp"; then
		echo 'Unable to get to mobile phone number prompt'
		return 1
	fi
	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"

	if test -n "$GCFCU_PHONE_US"; then
		locale=1078
		read num_1 num_2 num_3 <<-EOF
		$GCFCU_PHONE_US
		EOF
	elif test -n "$GCFCU_PHONE"; then
		locale=1079
		read num_country num_int <<-EOF
		$GCFCU_PHONE
		EOF
	elif read -p 'Mobile phone is in US/Canada? [Y/n] ' resp
		test "$resp" != 'n'
	then
		locale=1078
		read -p 'Mobile phone number (___ ___ ____): ' num_1 num_2 num_3
	else
		locale=1079
		read -p 'Country code: ' num_country
		read -p 'Phone number: ' num_int
	fi

	req >"$tmp" "/OOBChallengeText.aspx" -L \
		-d "__EVENTVALIDATION=$eventval" \
		-d "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AddlLocale=$locale" \
		-d "_ctl0%3APageWorkSpace%3AtxtNumber1=$num_1" \
		-d "_ctl0%3APageWorkSpace%3AtxtNumber2=$num_2" \
		-d "_ctl0%3APageWorkSpace%3AtxtNumber3=$num_3" \
		-d "_ctl0%3APageWorkSpace%3AtxtCountryCode=$num_country" \
		-d "_ctl0%3APageWorkSpace%3AtxtIntNum=$num_int" \
		-d "_ctl0%3APageWorkSpace%3AbtnSendMessage=Send+text+message" \
		--trace-ascii text3-trace
	cp $tmp text3.html
	if grep -q 'Processing Error' "$tmp"; then
		echo Error
		return 1
	fi

	#qs
	#-d "_ctl0%3APageWorkSpace%3AtxtSMSCode=$code"
	#-d "_ctl0%3APageWorkSpace%3AbtnSubmit=Submit
}

# Receive one-time security code from user by phone
sec_code_phone() {
	local oob code resp
	req >"$tmp" "/OOBChallenge.aspx" \
		-e "$site_dir" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AhdnSelectedNum=1" \
		-d "_ctl0%3APageWorkSpace%3AbtnContinue=Continue"

	oob="$(grep OOBVerification "$tmp" | \
		sed "s/.*OOBVerification\.aspx//; s/'.*//")"
	if test -z "$oob"; then
		echo 'Unable to get OOBVerification'
		return 1
	fi

	req >"$tmp" "/OOBVerification.aspx$oob"
	if ! grep -q 'Enter the security code' "$tmp"; then
		echo 'Unable to get to security code prompt'
		return 1
	fi

	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"
	code="$(sed '/lblVoiceCode"/!d; s/.*<font[^>]*>//; s/<.*//; q' "$tmp")"
	echo "One-time security code: $code"
	echo 'The phone call is underway. Press enter when the call is complete.'
	read _

	req >"$tmp" "/OOBVerification.aspx$oob" \
		-e "$site_dir" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AbtnCallCompleted=Phone+call+completed"
	if grep -q "<script>.*OOBError" "$tmp" || \
		grep -q "LoginAdv\.aspx?error=true&msg=1315" "$tmp"
	then
		echo 'There was an error'
		read -p 'Try again? [Y/n]' resp
		if test "$resp" != 'n'; then
			sec_code_phone
			return $?
		else
			return 1
		fi
	fi

	# TODO: implement btnCancel=Cancel
}

foo() {
	local tmp="$(mktemp)"
	trap "rm '$tmp'" 0
	#req >"$tmp" "/SignOn.aspx?qs=XuuRl08sxXM%3d" -L
	#cp "$tmp" "login-redir.html"
}

transactions() {
	local tmp viewstate eventval acct
	tmp="$(mktemp)"
	trap "rm '$tmp'" 0

	req_cached >"$tmp" "/AcctTransDownload.aspx"
	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"

	acct="${opt_account:-$GCFCU_ACCOUNT}"
	req "/AcctTransDownload.aspx" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		-d "_ctl0%3APageWorkSpace%3AddlAccount=$acct" \
		-d "_ctl0%3APageWorkSpace%3AddlTimePeriod=1" \
		-d "_ctl0%3APageWorkSpace%3AinpStartDate=" \
		-d "_ctl0%3APageWorkSpace%3AinpEndDate=" \
		-d "_ctl0%3APageWorkSpace%3AddlActivity=1" \
		-d "_ctl0%3APageWorkSpace%3AddlFileType=TEXT" \
		-d "_ctl0%3APageWorkSpace%3AddlDelimiter=TAB" \
		-d "_ctl0%3APageWorkSpace%3AbtnDownLoadTransactions="
}

main() {
	local args= cmd= state=
	for arg; do
		case $state in
			'')
				case "$arg" in
					-v|--verbose) opt_verbose=1;;
					-n|--no-cache) opt_nocache=1;;
					-r|--raw) opt_raw=1;;
					-h|--help) opt_help=1;;
					-m|--method) state=method;;
					-a|--account) state=account;;
					*)
						if test -z "$cmd"
						then cmd="$arg"
						else args="$args $arg"
						fi
				esac
				;;
			account) opt_account="$arg"; state=;;
			method) opt_method="$arg"; state=;;
		esac
	done
	set -- $args
	case "$cmd" in
		'') foo;;
		signin) signin;;
		transactions) transactions;;
		clean-cache) clean_cache $@;;
	esac
}

check_cookies
check_cachedir

main $@

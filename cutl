#!/bin/sh

site_base=https://secure.cuaccount-access.com/
cache_dir_checked=
cookie_jar_checked=
bin=${0##*/}

opt_verbose=
opt_nocache=
opt_help=
opt_method=

tmp=
viewstate=
eventval=

test -f "${CUTL_CONFIG_FILE:="${XDG_CONFIG_HOME:-~/.config}/cutlrc"}" &&
	. "$CUTL_CONFIG_FILE"

cu_name=${CUTL_CU_NAME:-GeneseeCoopFCU}
site_dir=${CUTL_CU_SITE:-$site_base$cu_name}
cookie_jar=${CUTL_COOKIEJAR:-~/.cutl_cookies.txt}
cache_dir="${CUTL_CACHE_DIR:-/tmp/cutl-$LOGNAME}"

# Check if a file is accessible to other users
insecure_file() {
	test -n "$(find "$1" -maxdepth 0 -perm +066 2>&-;
		find "$1" -maxdepth 0 -perm /066 2>&-)"
}

# Check the cookie file and create it if necessary
check_cookies() {
	test -n "$cookie_jar_checked" && return
	test -e "$cookie_jar" || touch "$cookie_jar"
	insecure_file "$cookie_jar" && chmod 600 "$cookie_jar"
	cookie_jar_checked=1
}

# Check the cache dir and create if it necessary
check_cachedir() {
	test -n "$cache_dir_checked" && return
	test -d "$cache_dir" || mkdir -p "$cache_dir"
	insecure_file "$cache_dir" || chmod 700 "$cache_dir"
	cache_dir_checked=1

	# Clean out the cache dir. delete files older than one day
	find "$cache_dir" -mtime +0 -exec echo rm {} \+
}

# Extract a value from a HTML element
get_value() {
	sed -e "/$1/!d" -e 's/.*value="//; s/".*//; q' $2
}

# Output a log/debug message
log() {
	test -n "$opt_verbose" && echo $@
} >&2

# Empty the cache
clean_cache() {
	rm -rf "$cache_dir"
}

# Make a request directly
req() {
	local url="$site_dir$1"
	shift
	log req $url
	curl -s -b "$cookie_jar" -c "$cookie_jar" "$url" $@
}

# Make a request, cached
req_cached() {
	local cache_file="$cache_dir/$(echo ${1%%\?*} | sed 's/\//-/g')"
	if test -z "$opt_nocache" -a -s "$cache_file"
	then cat "$cache_file"
	else
		trap "rm -f $cache_file" 1 2 15
		req_try $@ | tee "$cache_file"
	fi
}

# Make a request, and try to log in if needed
req_try() {
	req $@ -i | awk '
		body==1 { print; next }
		/^Location:.*[lL]ogin/ { exit 99 }
		length($0) == 1 && NR > 2 { body=1 }'
	case $? in
		99)
			# Log in and retry the request
			signin && req_try $@
	esac
}

signin() {
	local username password tmp oob resp qs
	tmp="$(mktemp)"
	trap "rm '$tmp'" 0
	req '/' > "$tmp"
	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"

	if test -n "$CUTL_USERNAME"
	then username="$CUTL_USERNAME"
	else read -rp 'Username: ' username
	fi

	req >"$tmp" '/login.aspx' -L -e "$site_dir" \
		--data-urlencode "txtUsername=$username" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__EVENTTARGET=cmdLogin" \
		--data-urlencode "__VIEWSTATE=$viewstate"

	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"

	if grep -q 'Continue with Security Code' "$tmp"; then
		signin_sec
	elif ! grep -q 'PassMark Recognized' "$tmp"; then
		echo 'Signin error'
		return 1
	fi

	if test -n "$CUTL_PASSWORD"
	then password="$CUTL_PASSWORD"
	elif test -n "$CUTL_PASSCMD"
	then password="$(sh -c "$CUTL_PASSCMD")"
	else stty -echo; read -rp 'Passphrase: ' password; echo >&2; stty echo
	fi

	qs="$(grep PassMarkRecognizedAdv "$tmp" | \
		sed 's/.*PassMarkRecognizedAdv\.aspx//; s/".*//; q')"
	req >"$tmp" "/PassMarkRecognizedAdv.aspx$qs" \
		-e "$site_dir" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AbtnSignin=Sign+on" \
		-d "_ctl0%3APageWorkSpace%3AtxtPassword=$password"
	if grep 'Object moved to.*Login\.aspx' "$tmp"; then
		log retrying login
		signin || return $?
	elif grep -q 'Object moved to <a.*Web_Bank.aspx' "$tmp"; then
		log login success
	fi
} >&2

signin_sec() {
	req >"$tmp" '/SignOn.aspx' \
		-e "$site_dir" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		-d "_ctl0%3APageWorkSpace%3ASecurityCodeImage1%3AbtnContinueSecurityCode=Continue+with+Security+Code"
	if grep -q 'Processing Error' "$tmp"; then
		echo Error
		return 1
	fi

	oob="$(grep OOBChallenge "$tmp" | sed "s/.*OOBChallenge\.aspx//; s/'.*//")"
	if test -z "$oob"; then
		echo 'Unable to get OOBChallenge'
		return 1
	fi

	req >"$tmp" "/OOBChallenge.aspx$oob"
	if ! grep -q 'Tell us where to reach you' "$tmp"; then
		echo 'Missing OOB challenge'
		return 1
	fi

	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"
	phone_mask="$(get_value _hdnSelectedMaskNum "$tmp")"

	case "${opt_method:-$CUTL_CODE_METHOD}" in
		phone) sec_code_phone; return $?;;
		text) sec_code_text; return $?;;
		*)
			echo 'Receive One-Time Security Code by:'
			echo "[p]hone ($phone_mask)"
			echo "[t]ext message"
			while true; do
				read -p '? ' resp
				case "$resp" in
					p) sec_code_phone; return $?;;
					t) sec_code_text; return $?;;
				esac
			done
	esac

	#get
	#/PassMarkRecognizedAdv.aspx?qs=b2TU7c2wr8E0dfptJiVc6osqODJNVVaa6UZusUsRdZI%3d
}

# Receive one-time security code from user by text message
sec_code_text() {
	local oob locale num_1= num_2= num_3= num_country= num_int= resp
	req >"$tmp" "/OOBChallenge.aspx" \
		-e "$site_dir" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AhdnSelectedNum=7" \
		-d "_ctl0%3APageWorkSpace%3AbtnContinue=Continue"

	oob="$(grep OOBChallengeText "$tmp" | \
		sed "s/.*OOBChallengeText\.aspx//; s/'.*//")"
	if test -z "$oob"; then
		echo 'Unable to get OOBChallengeText' >&2
		return 1
	fi

	req >"$tmp" "/OOBChallengeText.aspx$oob"
	if ! grep -q 'Enter your mobile phone number' "$tmp"; then
		echo 'Unable to get to mobile phone number prompt'
		return 1
	fi
	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"

	if test -n "$CUTL_PHONE_US"; then
		locale=1078
		read num_1 num_2 num_3 <<-EOF
		$CUTL_PHONE_US
		EOF
	elif test -n "$CUTL_PHONE"; then
		locale=1079
		read num_country num_int <<-EOF
		$CUTL_PHONE
		EOF
	elif read -p 'Mobile phone is in US/Canada? [Y/n] ' resp
		test "$resp" != 'n'
	then
		locale=1078
		read -p 'Mobile phone number (___ ___ ____): ' num_1 num_2 num_3
	else
		locale=1079
		read -p 'Country code: ' num_country
		read -p 'Phone number: ' num_int
	fi

	req >"$tmp" "/OOBChallengeText.aspx" -L \
		-d "__EVENTVALIDATION=$eventval" \
		-d "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AddlLocale=$locale" \
		-d "_ctl0%3APageWorkSpace%3AtxtNumber1=$num_1" \
		-d "_ctl0%3APageWorkSpace%3AtxtNumber2=$num_2" \
		-d "_ctl0%3APageWorkSpace%3AtxtNumber3=$num_3" \
		-d "_ctl0%3APageWorkSpace%3AtxtCountryCode=$num_country" \
		-d "_ctl0%3APageWorkSpace%3AtxtIntNum=$num_int" \
		-d "_ctl0%3APageWorkSpace%3AbtnSendMessage=Send+text+message" \
		--trace-ascii text3-trace
	cp $tmp text3.html
	if grep -q 'Processing Error' "$tmp"; then
		echo Error
		return 1
	fi

	#qs
	#-d "_ctl0%3APageWorkSpace%3AtxtSMSCode=$code"
	#-d "_ctl0%3APageWorkSpace%3AbtnSubmit=Submit
}

# Receive one-time security code from user by phone
sec_code_phone() {
	local oob code resp
	req >"$tmp" "/OOBChallenge.aspx" \
		-e "$site_dir" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AhdnSelectedNum=1" \
		-d "_ctl0%3APageWorkSpace%3AbtnContinue=Continue"

	oob="$(grep OOBVerification "$tmp" | \
		sed "s/.*OOBVerification\.aspx//; s/'.*//")"
	if test -z "$oob"; then
		echo 'Unable to get OOBVerification'
		return 1
	fi

	req >"$tmp" "/OOBVerification.aspx$oob"
	if ! grep -q 'Enter the security code' "$tmp"; then
		echo 'Unable to get to security code prompt'
		return 1
	fi

	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"
	code="$(sed '/lblVoiceCode"/!d; s/.*<font[^>]*>//; s/<.*//; q' "$tmp")"
	echo "One-time security code: $code"
	echo 'The phone call is underway. Press enter when the call is complete.'
	read _

	req >"$tmp" "/OOBVerification.aspx$oob" \
		-e "$site_dir" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		-d "_ctl0%3APageWorkSpace%3AbtnCallCompleted=Phone+call+completed"
	if grep -q "<script>.*OOBError" "$tmp" || \
		grep -q "LoginAdv\.aspx?error=true&msg=1315" "$tmp"
	then
		echo 'There was an error'
		read -p 'Try again? [Y/n]' resp
		if test "$resp" != 'n'; then
			sec_code_phone
			return $?
		else
			return 1
		fi
	fi

	# TODO: implement btnCancel=Cancel
}

# Format transactions in ledger(1) format
tsv_to_ledger() {
	{
		accounts_overview -H
		echo
		cat
	} | awk -F '	' '
	!body && /^$/ {
		body = 1
		next
	}
	!body {
		account_names[$3] = $2
		next
	}
	{
		sub(/\s*$/, "", $7)
		sub(/T.*/, "", $2)
		gsub(/-/, "/", $2)
		assets_account = $1
	}
	$1 in account_names {
		assets_account = account_names[$1]
	}
	$5 {
		sub(" #" $5 "$", "", $7)
		$7="(#" $5 ") " $7
	}
	$3 == "Credit" {
		account_to = "Assets:" assets_account
		account_from = "Income"
	}
	$3 == "Debit" || $3 == "Checks Paid" {
		account_to = "Expenses"
		account_from = "Assets:" assets_account
	}
	$7 ~ / - / {
		sub(/(ACH Withdrawal|Debit Card\/ACH Point of Sale) - /, "", $7)
	}
	$7 ~ /^Dividend - / {
		sub(/Dividend - /, "", $7)
		account_from = "Income:Dividends"
	}
	{
		print $2, $7
		printf "    %-36s  %10s\n", account_to, "$" $6
		printf "    %s\n\n", account_from
	}
	'
}

transactions() {
	if test -n "$opt_help"; then
		cat <<EOF
Usage: $bin transactions [options]

Get a listing of transactions in one or all accounts.

Options:
    -a --account ACCOUNT    Account to query, or all if omitted
    -f --format FORMAT      Data format (default is text):
                                text|xls|qfx|qif|qbo|iif|bai2|ledger
    -d --delimiter DELIM    Delimiter for text format (default is tab):
                                tab|space|comma
    -t --type TYPE          Transaction type (default is all):
                                all|deposits|checks|withdrawals
Date range options:
    -A --all                All time
    -c --current            Current statement (default)
    -y --yesterday          Yesterday only
    -30 -45 -60 -90         Last N days

Fixed date range (overrides other date options):
    -b --begin MM/DD/YYYY   Start date
    -e --end MM/DD/YYYY     End date
EOF
        return 0
    fi

	local format tmp viewopt eventval period
	local opt= opt_format= begin= end= account= postprocess= atype=1 delim=TAB

	for arg; do
		case $opt in
			'')
				case "$arg" in
					-a|--account) opt=account;;
					-f|--format) opt=format;;
					-b|--begin) opt=begin;;
					-e|--end) opt=end;;
					-t|--type) opt=type;;
					-d|--delimiter) opt=delim;;
					-c|--current) period=0;;
					-A|--all) period=1;;
					-y|--yesterday) period=3;;
					--deposits) atype=2;;
					--checks) atype=3;;
					--withdrawals) atype=4;;
					-30) period=4;;
					-45) period=5;;
					-60) period=6;;
					-90) period=7;;
					*) echo "Unknown argument $arg" >&2; return 1;;
				esac
				;;
			account) account="$arg"; opt=;;
			format) opt_format="$arg"; opt=;;
			begin) begin="$arg"; opt=;;
			end) end="$arg"; opt=;;
			delim)
				case "$arg" in
					'	'|tab|TAB) delim=TAB;;
					' '|space|SPACE) delim=SPACE;;
					,|comma|COMMA) delim=COMMA;;
					*) echo "Unknown delimiter type $arg" >&2; return 1;;
				esac
				opt=
				;;
			type)
				case "$arg" in
					all) atype=1;;
					deposits) atype=2;;
					checks) atype=3;;
					withdrawals) atype=4;;
					*) echo "Unknown activity type $arg" >&2; return 1;;
				esac
				opt=
				;;
		esac
	done

	case "${opt_format:-$CUTL_TRANSACTION_FORMAT}" in
		''|text|TEXT) format=TEXT;;
		ledger) format=TEXT; delim=TAB; postprocess=ledger;;
		iif|IIF) format=IIF;;
		qfx|QFX) format=QFX;;
		qbo|QBO) format=QBO;;
		bai2|BAI2) format=BAI2;;
		xls|XLS) format=XLS;;
		qif|QIF) format=QIF;;
		*) echo "Unknown format $opt_format" >&2; return 1;;
	esac

	if test -z "$account" -a "$format" != TEXT; then
		echo 'Only text format can be used when requesting' \
			'transactions of multiple accounts' >&2
		return 1
	fi

	# Ensure begin and end date are both set if one is set
	case "$period-$begin-$end" in
		--) period=0;;
		-*/*/*-*/*/*) period=2;;
		--*?) period=2; begin="$(date +'%m/%d/%Y')";;
		-*?-) period=2; end="$(date +'%m/%d/%Y')";;
		?--) ;;
		*) echo 'Date range conflicts with other date range options' >&2;;
	esac

	tmp="$(mktemp)"
	trap "rm '$tmp'" 0

	if test -n "$account"
	then transactions_single
	else transactions_multi
	fi | case "$postprocess" in
		ledger) tsv_to_ledger;;
		*) cat;;
	esac
}

# Get transactions for one account
transactions_single() {
	req_cached >"$tmp" "/AcctTransDownload.aspx"
	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"

	req_try "/AcctTransDownload.aspx" \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		-d "_ctl0%3APageWorkSpace%3AddlAccount=$account" \
		-d "_ctl0%3APageWorkSpace%3AddlTimePeriod=$period" \
		-d "_ctl0%3APageWorkSpace%3AinpStartDate=$begin" \
		-d "_ctl0%3APageWorkSpace%3AinpEndDate=$end" \
		-d "_ctl0%3APageWorkSpace%3AddlActivity=$atype" \
		-d "_ctl0%3APageWorkSpace%3AddlFileType=$format" \
		-d "_ctl0%3APageWorkSpace%3AddlDelimiter=$delim" \
		-d "_ctl0%3APageWorkSpace%3AbtnDownLoadTransactions="
}

# Get transactions for all accounts
transactions_multi() {
	local checkbox_data
	req_cached '/AcctTransDownloadMultiAcct.aspx' >"$tmp"
	viewstate="$(get_value __VIEWSTATE "$tmp")"
	eventval="$(get_value __EVENTVALIDATION "$tmp")"
	checkbox_data="$(grep 'gvwAccounts:_ctl' "$tmp" | \
		sed 's/.*name="\([^"]*\).*/-d \1=on/; s/:/%3A/g')"
	req_try '/AcctTransDownloadMultiAcct.aspx' \
		--data-urlencode "__VIEWSTATE=$viewstate" \
		--data-urlencode "__EVENTVALIDATION=$eventval" \
		-d '__VIEWSTATEENCRYPTED=' \
		$checkbox_data \
		-e "$site_dir/AcctTransDownloadMultiAcct.aspx" \
		-d "_ctl0%3APageWorkSpace%3AddlTimePeriod=$period" \
		-d "_ctl0%3APageWorkSpace%3AinpStartDate=$begin" \
		-d "_ctl0%3APageWorkSpace%3AinpEndDate=$end" \
		-d "_ctl0%3APageWorkSpace%3AddlActivity=$atype" \
		-d "_ctl0%3APageWorkSpace%3AddlFileType=$format" \
		-d "_ctl0%3APageWorkSpace%3AddlDelimiter=$delim" \
		-d "_ctl0%3APageWorkSpace%3AbtnDownLoadTransactions="
}

accounts_overview() {
	if test -n "$opt_help"; then
		cat <<EOF
Usage: $bin accounts [options]

List accounts and other details. Output a header with the account-holder's
name and sign-on activity, followed by TSV of current accounts.

Options:
    -H --no-header          Omit the header. Useful for scripting
EOF
        return 0
    fi

	local opt_no_header= header_sed=
	for arg; do
		case "$arg" in
			-H|--no-header) opt_no_header=1;;
			*) echo "Unknown argument $arg" >&2;;
		esac
	done
	if test -z "$opt_no_header"; then
		# Print a header with name, signin details
		header_sed='/lblWelcomeMsg/ {
			s/.*>Welcome \([^,]*\) *,.*last time you signed on was \([^.]*\).*last failed sign on was \([^.]*\).*/Name: \1\nLast sign on: \2\nLast failed sign on: \3\n/
			p
		}
		# Print a header of TSV values
		/<thead>/ {
			s/.*/ID	Account Name	Number	Available Balance	Current Balance/
			p
		}
		'
	fi
	req_cached '/AcctOverview.aspx' | sed "
	$header_sed
	/AcctDetail/!d
	s/.*<a[^>]*id=\([0-9a-z-]*\).>\([^<]*\).*<a[^>]*>\([^<]*\).*<span>\([^<]*\).*<span>\([^<]*\).*/\1	\2	\3	\4	\5/"
}

bare() {
	cat <<EOF
Usage: $bin <command> [options]

Access a credit union account

Commands:
    transactions            Get account transactions
    accounts                Get info about accounts

Options:
    -h --help               Get info about a command
    -v --verbose            Output feedback as a command is executing
    -vv                     Output more debug info
    -n --no-cache           Skip cached command responses
    -m --method METHOD      Account login verification method: text or phone
EOF
}

main() {
	local args= cmd= opt=
	for arg; do
		case $opt in
			'')
				case "$arg" in
					-v|--verbose) opt_verbose=1;;
					-vv) opt_verbose=1; set -x;;
					-n|--no-cache) opt_nocache=1;;
					-h|--help) opt_help=1;;
					-m|--method) opt=method;;
					*)
						if test -z "$cmd"
						then cmd="$arg"
						else args="$args $arg"
						fi
				esac
				;;
			method) opt_method="$arg"; opt=;;
		esac
	done
	set -- $args
	case "$cmd" in
		'') bare;;
		accounts) accounts_overview $@;;
		transactions) transactions $@;;
		clean-cache) clean_cache $@;;
	esac
}

check_cookies
check_cachedir

main $@
